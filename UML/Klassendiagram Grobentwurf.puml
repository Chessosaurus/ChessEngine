@startuml
skinparam linetype ortho

interface Piece {
    - type: Type
    - color: Color
}

class King {
    - value: int
    - color: Color
    + King(color: Color)
    + getValue(): int
    + getColor(): Color
    + move(): void
}

class Queen {
    - value: int
    - color: Color
    + Queen(color: Color)
    + getValue(): int
    + getColor(): Color
    + move(): void
}

class Bishop {
    - value: int
    - color: Color
    + Bishop(color: Color)
    + getValue(): int
    + getColor(): Color
    + move(): void
}

class Knight {
    - value: int
    - color: Color
    + Knight(color: Color)
    + getValue(): int
    + getColor(): Color
    + move(): void
}

class Rook {
    - value: int
    - color: Color
    + Rook(color: Color)
    + getValue(): int
    + getColor(): Color
    + move(): void
}

class Pawn{
    - value: int
    - color: Color
    + Pawn(color: Color)
    + getValue(): int
    + getColor(): Color
    + move(): void
}


enum Color {
    WHITE
    BLACK
}
Piece --|> Color
Piece <|.. King
Piece <|.. Queen
Piece <|.. Bishop
Piece <|.. Knight
Piece <|.. Rook
Piece <|.. Pawn


class Board {
    - pieces: Piece[][]
    - whiteToMove: boolean
}

Board -- Piece

class Move {
    - startRow: int
    - startCol: int
    - endRow: int
    - endCol: int
    - promotedTo: Piece

}

Board -- Move

class MoveGenerator {
    + generateLegalMoves(board: Board): List<Move>
}

Board --|> MoveGenerator

class Evaluator {
    + evaluate(board: Board): int
}

Board --|> Evaluator

class Search {
    + findBestMove(board: Board, depth: int): Move
}

Board --|> Search
@enduml
